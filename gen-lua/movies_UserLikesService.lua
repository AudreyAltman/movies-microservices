--
-- Autogenerated by Thrift
--
-- DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
-- @generated
--


require 'Thrift'
require 'movies_ttypes'

UserLikesServiceClient = __TObject.new(__TClient, {
  __type = 'UserLikesServiceClient'
})

function UserLikesServiceClient:UserRateMovie(user_id, movie_id, likeDislike)
  self:send_UserRateMovie(user_id, movie_id, likeDislike)
  self:recv_UserRateMovie(user_id, movie_id, likeDislike)
end

function UserLikesServiceClient:send_UserRateMovie(user_id, movie_id, likeDislike)
  self.oprot:writeMessageBegin('UserRateMovie', TMessageType.CALL, self._seqid)
  local args = UserRateMovie_args:new{}
  args.user_id = user_id
  args.movie_id = movie_id
  args.likeDislike = likeDislike
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function UserLikesServiceClient:recv_UserRateMovie(user_id, movie_id, likeDislike)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = UserRateMovie_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
end

function UserLikesServiceClient:GetUsersLikedMovies(user_id)
  self:send_GetUsersLikedMovies(user_id)
  return self:recv_GetUsersLikedMovies(user_id)
end

function UserLikesServiceClient:send_GetUsersLikedMovies(user_id)
  self.oprot:writeMessageBegin('GetUsersLikedMovies', TMessageType.CALL, self._seqid)
  local args = GetUsersLikedMovies_args:new{}
  args.user_id = user_id
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function UserLikesServiceClient:recv_GetUsersLikedMovies(user_id)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = GetUsersLikedMovies_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.se then
    error(result.se)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function UserLikesServiceClient:GetMovieRating(movie_id)
  self:send_GetMovieRating(movie_id)
  return self:recv_GetMovieRating(movie_id)
end

function UserLikesServiceClient:send_GetMovieRating(movie_id)
  self.oprot:writeMessageBegin('GetMovieRating', TMessageType.CALL, self._seqid)
  local args = GetMovieRating_args:new{}
  args.movie_id = movie_id
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function UserLikesServiceClient:recv_GetMovieRating(movie_id)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = GetMovieRating_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.se then
    error(result.se)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function UserLikesServiceClient:UserWatchMovie(user_id, movie_id)
  self:send_UserWatchMovie(user_id, movie_id)
  self:recv_UserWatchMovie(user_id, movie_id)
end

function UserLikesServiceClient:send_UserWatchMovie(user_id, movie_id)
  self.oprot:writeMessageBegin('UserWatchMovie', TMessageType.CALL, self._seqid)
  local args = UserWatchMovie_args:new{}
  args.user_id = user_id
  args.movie_id = movie_id
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function UserLikesServiceClient:recv_UserWatchMovie(user_id, movie_id)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = UserWatchMovie_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
end

function UserLikesServiceClient:AddUser(user_name)
  self:send_AddUser(user_name)
  self:recv_AddUser(user_name)
end

function UserLikesServiceClient:send_AddUser(user_name)
  self.oprot:writeMessageBegin('AddUser', TMessageType.CALL, self._seqid)
  local args = AddUser_args:new{}
  args.user_name = user_name
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function UserLikesServiceClient:recv_AddUser(user_name)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = AddUser_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
end

function UserLikesServiceClient:GetUserID(user_name)
  self:send_GetUserID(user_name)
  return self:recv_GetUserID(user_name)
end

function UserLikesServiceClient:send_GetUserID(user_name)
  self.oprot:writeMessageBegin('GetUserID', TMessageType.CALL, self._seqid)
  local args = GetUserID_args:new{}
  args.user_name = user_name
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function UserLikesServiceClient:recv_GetUserID(user_name)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = GetUserID_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.se then
    error(result.se)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end
UserLikesServiceIface = __TObject:new{
  __type = 'UserLikesServiceIface'
}


UserLikesServiceProcessor = __TObject.new(__TProcessor
, {
 __type = 'UserLikesServiceProcessor'
})

function UserLikesServiceProcessor:process(iprot, oprot, server_ctx)
  local name, mtype, seqid = iprot:readMessageBegin()
  local func_name = 'process_' .. name
  if not self[func_name] or ttype(self[func_name]) ~= 'function' then
    iprot:skip(TType.STRUCT)
    iprot:readMessageEnd()
    x = TApplicationException:new{
      errorCode = TApplicationException.UNKNOWN_METHOD
    }
    oprot:writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
    x:write(oprot)
    oprot:writeMessageEnd()
    oprot.trans:flush()
  else
    self[func_name](self, seqid, iprot, oprot, server_ctx)
  end
end

function UserLikesServiceProcessor:process_UserRateMovie(seqid, iprot, oprot, server_ctx)
  local args = UserRateMovie_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = UserRateMovie_result:new{}
  local status, res = pcall(self.handler.UserRateMovie, self.handler, args.user_id, args.movie_id, args.likeDislike)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'ServiceException' then
    result.se = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('UserRateMovie', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function UserLikesServiceProcessor:process_GetUsersLikedMovies(seqid, iprot, oprot, server_ctx)
  local args = GetUsersLikedMovies_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = GetUsersLikedMovies_result:new{}
  local status, res = pcall(self.handler.GetUsersLikedMovies, self.handler, args.user_id)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'ServiceException' then
    result.se = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('GetUsersLikedMovies', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function UserLikesServiceProcessor:process_GetMovieRating(seqid, iprot, oprot, server_ctx)
  local args = GetMovieRating_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = GetMovieRating_result:new{}
  local status, res = pcall(self.handler.GetMovieRating, self.handler, args.movie_id)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'ServiceException' then
    result.se = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('GetMovieRating', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function UserLikesServiceProcessor:process_UserWatchMovie(seqid, iprot, oprot, server_ctx)
  local args = UserWatchMovie_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = UserWatchMovie_result:new{}
  local status, res = pcall(self.handler.UserWatchMovie, self.handler, args.user_id, args.movie_id)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'ServiceException' then
    result.se = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('UserWatchMovie', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function UserLikesServiceProcessor:process_AddUser(seqid, iprot, oprot, server_ctx)
  local args = AddUser_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = AddUser_result:new{}
  local status, res = pcall(self.handler.AddUser, self.handler, args.user_name)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'ServiceException' then
    result.se = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('AddUser', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function UserLikesServiceProcessor:process_GetUserID(seqid, iprot, oprot, server_ctx)
  local args = GetUserID_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = GetUserID_result:new{}
  local status, res = pcall(self.handler.GetUserID, self.handler, args.user_name)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'ServiceException' then
    result.se = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('GetUserID', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

-- HELPER FUNCTIONS AND STRUCTURES

UserRateMovie_args = __TObject:new{
  user_id,
  movie_id,
  likeDislike
}

function UserRateMovie_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I64 then
        self.user_id = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.movie_id = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I64 then
        self.likeDislike = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function UserRateMovie_args:write(oprot)
  oprot:writeStructBegin('UserRateMovie_args')
  if self.user_id ~= nil then
    oprot:writeFieldBegin('user_id', TType.I64, 1)
    oprot:writeI64(self.user_id)
    oprot:writeFieldEnd()
  end
  if self.movie_id ~= nil then
    oprot:writeFieldBegin('movie_id', TType.STRING, 2)
    oprot:writeString(self.movie_id)
    oprot:writeFieldEnd()
  end
  if self.likeDislike ~= nil then
    oprot:writeFieldBegin('likeDislike', TType.I64, 3)
    oprot:writeI64(self.likeDislike)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

UserRateMovie_result = __TObject:new{
  se
}

function UserRateMovie_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.se = ServiceException:new{}
        self.se:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function UserRateMovie_result:write(oprot)
  oprot:writeStructBegin('UserRateMovie_result')
  if self.se ~= nil then
    oprot:writeFieldBegin('se', TType.STRUCT, 1)
    self.se:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

GetUsersLikedMovies_args = __TObject:new{
  user_id
}

function GetUsersLikedMovies_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I64 then
        self.user_id = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function GetUsersLikedMovies_args:write(oprot)
  oprot:writeStructBegin('GetUsersLikedMovies_args')
  if self.user_id ~= nil then
    oprot:writeFieldBegin('user_id', TType.I64, 1)
    oprot:writeI64(self.user_id)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

GetUsersLikedMovies_result = __TObject:new{
  success,
  se
}

function GetUsersLikedMovies_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.LIST then
        self.success = {}
        local _etype27, _size24 = iprot:readListBegin()
        for _i=1,_size24 do
          local _elem28 = iprot:readString()
          table.insert(self.success, _elem28)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.se = ServiceException:new{}
        self.se:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function GetUsersLikedMovies_result:write(oprot)
  oprot:writeStructBegin('GetUsersLikedMovies_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.LIST, 0)
    oprot:writeListBegin(TType.STRING, #self.success)
    for _,iter29 in ipairs(self.success) do
      oprot:writeString(iter29)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.se ~= nil then
    oprot:writeFieldBegin('se', TType.STRUCT, 1)
    self.se:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

GetMovieRating_args = __TObject:new{
  movie_id
}

function GetMovieRating_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.movie_id = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function GetMovieRating_args:write(oprot)
  oprot:writeStructBegin('GetMovieRating_args')
  if self.movie_id ~= nil then
    oprot:writeFieldBegin('movie_id', TType.STRING, 1)
    oprot:writeString(self.movie_id)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

GetMovieRating_result = __TObject:new{
  success,
  se
}

function GetMovieRating_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.I64 then
        self.success = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.se = ServiceException:new{}
        self.se:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function GetMovieRating_result:write(oprot)
  oprot:writeStructBegin('GetMovieRating_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.I64, 0)
    oprot:writeI64(self.success)
    oprot:writeFieldEnd()
  end
  if self.se ~= nil then
    oprot:writeFieldBegin('se', TType.STRUCT, 1)
    self.se:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

UserWatchMovie_args = __TObject:new{
  user_id,
  movie_id
}

function UserWatchMovie_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I64 then
        self.user_id = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.movie_id = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function UserWatchMovie_args:write(oprot)
  oprot:writeStructBegin('UserWatchMovie_args')
  if self.user_id ~= nil then
    oprot:writeFieldBegin('user_id', TType.I64, 1)
    oprot:writeI64(self.user_id)
    oprot:writeFieldEnd()
  end
  if self.movie_id ~= nil then
    oprot:writeFieldBegin('movie_id', TType.STRING, 2)
    oprot:writeString(self.movie_id)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

UserWatchMovie_result = __TObject:new{
  se
}

function UserWatchMovie_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.se = ServiceException:new{}
        self.se:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function UserWatchMovie_result:write(oprot)
  oprot:writeStructBegin('UserWatchMovie_result')
  if self.se ~= nil then
    oprot:writeFieldBegin('se', TType.STRUCT, 1)
    self.se:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

AddUser_args = __TObject:new{
  user_name
}

function AddUser_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.user_name = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function AddUser_args:write(oprot)
  oprot:writeStructBegin('AddUser_args')
  if self.user_name ~= nil then
    oprot:writeFieldBegin('user_name', TType.STRING, 1)
    oprot:writeString(self.user_name)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

AddUser_result = __TObject:new{
  se
}

function AddUser_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.se = ServiceException:new{}
        self.se:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function AddUser_result:write(oprot)
  oprot:writeStructBegin('AddUser_result')
  if self.se ~= nil then
    oprot:writeFieldBegin('se', TType.STRUCT, 1)
    self.se:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

GetUserID_args = __TObject:new{
  user_name
}

function GetUserID_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.user_name = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function GetUserID_args:write(oprot)
  oprot:writeStructBegin('GetUserID_args')
  if self.user_name ~= nil then
    oprot:writeFieldBegin('user_name', TType.STRING, 1)
    oprot:writeString(self.user_name)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

GetUserID_result = __TObject:new{
  success,
  se
}

function GetUserID_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.I64 then
        self.success = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.se = ServiceException:new{}
        self.se:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function GetUserID_result:write(oprot)
  oprot:writeStructBegin('GetUserID_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.I64, 0)
    oprot:writeI64(self.success)
    oprot:writeFieldEnd()
  end
  if self.se ~= nil then
    oprot:writeFieldBegin('se', TType.STRUCT, 1)
    self.se:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end