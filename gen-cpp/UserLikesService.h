/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef UserLikesService_H
#define UserLikesService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "movies_types.h"

namespace movies {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class UserLikesServiceIf {
 public:
  virtual ~UserLikesServiceIf() {}
  virtual void UserRateMovie(const int64_t user_id, const std::string& movie_id, const int64_t likeDislike) = 0;
  virtual void GetUsersLikedMovies(std::vector<std::string> & _return, const int64_t user_id) = 0;
  virtual int64_t GetMovieRating(const std::string& movie_id) = 0;
  virtual void UserWatchMovie(const int64_t user_id, const std::string& movie_id) = 0;
  virtual void AddUser(const std::string& user_name) = 0;
  virtual int64_t GetUserID(const std::string& user_name) = 0;
};

class UserLikesServiceIfFactory {
 public:
  typedef UserLikesServiceIf Handler;

  virtual ~UserLikesServiceIfFactory() {}

  virtual UserLikesServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(UserLikesServiceIf* /* handler */) = 0;
};

class UserLikesServiceIfSingletonFactory : virtual public UserLikesServiceIfFactory {
 public:
  UserLikesServiceIfSingletonFactory(const ::std::shared_ptr<UserLikesServiceIf>& iface) : iface_(iface) {}
  virtual ~UserLikesServiceIfSingletonFactory() {}

  virtual UserLikesServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(UserLikesServiceIf* /* handler */) {}

 protected:
  ::std::shared_ptr<UserLikesServiceIf> iface_;
};

class UserLikesServiceNull : virtual public UserLikesServiceIf {
 public:
  virtual ~UserLikesServiceNull() {}
  void UserRateMovie(const int64_t /* user_id */, const std::string& /* movie_id */, const int64_t /* likeDislike */) {
    return;
  }
  void GetUsersLikedMovies(std::vector<std::string> & /* _return */, const int64_t /* user_id */) {
    return;
  }
  int64_t GetMovieRating(const std::string& /* movie_id */) {
    int64_t _return = 0;
    return _return;
  }
  void UserWatchMovie(const int64_t /* user_id */, const std::string& /* movie_id */) {
    return;
  }
  void AddUser(const std::string& /* user_name */) {
    return;
  }
  int64_t GetUserID(const std::string& /* user_name */) {
    int64_t _return = 0;
    return _return;
  }
};

typedef struct _UserLikesService_UserRateMovie_args__isset {
  _UserLikesService_UserRateMovie_args__isset() : user_id(false), movie_id(false), likeDislike(false) {}
  bool user_id :1;
  bool movie_id :1;
  bool likeDislike :1;
} _UserLikesService_UserRateMovie_args__isset;

class UserLikesService_UserRateMovie_args {
 public:

  UserLikesService_UserRateMovie_args(const UserLikesService_UserRateMovie_args&);
  UserLikesService_UserRateMovie_args& operator=(const UserLikesService_UserRateMovie_args&);
  UserLikesService_UserRateMovie_args() : user_id(0), movie_id(), likeDislike(0) {
  }

  virtual ~UserLikesService_UserRateMovie_args() noexcept;
  int64_t user_id;
  std::string movie_id;
  int64_t likeDislike;

  _UserLikesService_UserRateMovie_args__isset __isset;

  void __set_user_id(const int64_t val);

  void __set_movie_id(const std::string& val);

  void __set_likeDislike(const int64_t val);

  bool operator == (const UserLikesService_UserRateMovie_args & rhs) const
  {
    if (!(user_id == rhs.user_id))
      return false;
    if (!(movie_id == rhs.movie_id))
      return false;
    if (!(likeDislike == rhs.likeDislike))
      return false;
    return true;
  }
  bool operator != (const UserLikesService_UserRateMovie_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserLikesService_UserRateMovie_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class UserLikesService_UserRateMovie_pargs {
 public:


  virtual ~UserLikesService_UserRateMovie_pargs() noexcept;
  const int64_t* user_id;
  const std::string* movie_id;
  const int64_t* likeDislike;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UserLikesService_UserRateMovie_result__isset {
  _UserLikesService_UserRateMovie_result__isset() : se(false) {}
  bool se :1;
} _UserLikesService_UserRateMovie_result__isset;

class UserLikesService_UserRateMovie_result {
 public:

  UserLikesService_UserRateMovie_result(const UserLikesService_UserRateMovie_result&);
  UserLikesService_UserRateMovie_result& operator=(const UserLikesService_UserRateMovie_result&);
  UserLikesService_UserRateMovie_result() {
  }

  virtual ~UserLikesService_UserRateMovie_result() noexcept;
  ServiceException se;

  _UserLikesService_UserRateMovie_result__isset __isset;

  void __set_se(const ServiceException& val);

  bool operator == (const UserLikesService_UserRateMovie_result & rhs) const
  {
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const UserLikesService_UserRateMovie_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserLikesService_UserRateMovie_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UserLikesService_UserRateMovie_presult__isset {
  _UserLikesService_UserRateMovie_presult__isset() : se(false) {}
  bool se :1;
} _UserLikesService_UserRateMovie_presult__isset;

class UserLikesService_UserRateMovie_presult {
 public:


  virtual ~UserLikesService_UserRateMovie_presult() noexcept;
  ServiceException se;

  _UserLikesService_UserRateMovie_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _UserLikesService_GetUsersLikedMovies_args__isset {
  _UserLikesService_GetUsersLikedMovies_args__isset() : user_id(false) {}
  bool user_id :1;
} _UserLikesService_GetUsersLikedMovies_args__isset;

class UserLikesService_GetUsersLikedMovies_args {
 public:

  UserLikesService_GetUsersLikedMovies_args(const UserLikesService_GetUsersLikedMovies_args&);
  UserLikesService_GetUsersLikedMovies_args& operator=(const UserLikesService_GetUsersLikedMovies_args&);
  UserLikesService_GetUsersLikedMovies_args() : user_id(0) {
  }

  virtual ~UserLikesService_GetUsersLikedMovies_args() noexcept;
  int64_t user_id;

  _UserLikesService_GetUsersLikedMovies_args__isset __isset;

  void __set_user_id(const int64_t val);

  bool operator == (const UserLikesService_GetUsersLikedMovies_args & rhs) const
  {
    if (!(user_id == rhs.user_id))
      return false;
    return true;
  }
  bool operator != (const UserLikesService_GetUsersLikedMovies_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserLikesService_GetUsersLikedMovies_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class UserLikesService_GetUsersLikedMovies_pargs {
 public:


  virtual ~UserLikesService_GetUsersLikedMovies_pargs() noexcept;
  const int64_t* user_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UserLikesService_GetUsersLikedMovies_result__isset {
  _UserLikesService_GetUsersLikedMovies_result__isset() : success(false), se(false) {}
  bool success :1;
  bool se :1;
} _UserLikesService_GetUsersLikedMovies_result__isset;

class UserLikesService_GetUsersLikedMovies_result {
 public:

  UserLikesService_GetUsersLikedMovies_result(const UserLikesService_GetUsersLikedMovies_result&);
  UserLikesService_GetUsersLikedMovies_result& operator=(const UserLikesService_GetUsersLikedMovies_result&);
  UserLikesService_GetUsersLikedMovies_result() {
  }

  virtual ~UserLikesService_GetUsersLikedMovies_result() noexcept;
  std::vector<std::string>  success;
  ServiceException se;

  _UserLikesService_GetUsersLikedMovies_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  void __set_se(const ServiceException& val);

  bool operator == (const UserLikesService_GetUsersLikedMovies_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const UserLikesService_GetUsersLikedMovies_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserLikesService_GetUsersLikedMovies_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UserLikesService_GetUsersLikedMovies_presult__isset {
  _UserLikesService_GetUsersLikedMovies_presult__isset() : success(false), se(false) {}
  bool success :1;
  bool se :1;
} _UserLikesService_GetUsersLikedMovies_presult__isset;

class UserLikesService_GetUsersLikedMovies_presult {
 public:


  virtual ~UserLikesService_GetUsersLikedMovies_presult() noexcept;
  std::vector<std::string> * success;
  ServiceException se;

  _UserLikesService_GetUsersLikedMovies_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _UserLikesService_GetMovieRating_args__isset {
  _UserLikesService_GetMovieRating_args__isset() : movie_id(false) {}
  bool movie_id :1;
} _UserLikesService_GetMovieRating_args__isset;

class UserLikesService_GetMovieRating_args {
 public:

  UserLikesService_GetMovieRating_args(const UserLikesService_GetMovieRating_args&);
  UserLikesService_GetMovieRating_args& operator=(const UserLikesService_GetMovieRating_args&);
  UserLikesService_GetMovieRating_args() : movie_id() {
  }

  virtual ~UserLikesService_GetMovieRating_args() noexcept;
  std::string movie_id;

  _UserLikesService_GetMovieRating_args__isset __isset;

  void __set_movie_id(const std::string& val);

  bool operator == (const UserLikesService_GetMovieRating_args & rhs) const
  {
    if (!(movie_id == rhs.movie_id))
      return false;
    return true;
  }
  bool operator != (const UserLikesService_GetMovieRating_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserLikesService_GetMovieRating_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class UserLikesService_GetMovieRating_pargs {
 public:


  virtual ~UserLikesService_GetMovieRating_pargs() noexcept;
  const std::string* movie_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UserLikesService_GetMovieRating_result__isset {
  _UserLikesService_GetMovieRating_result__isset() : success(false), se(false) {}
  bool success :1;
  bool se :1;
} _UserLikesService_GetMovieRating_result__isset;

class UserLikesService_GetMovieRating_result {
 public:

  UserLikesService_GetMovieRating_result(const UserLikesService_GetMovieRating_result&);
  UserLikesService_GetMovieRating_result& operator=(const UserLikesService_GetMovieRating_result&);
  UserLikesService_GetMovieRating_result() : success(0) {
  }

  virtual ~UserLikesService_GetMovieRating_result() noexcept;
  int64_t success;
  ServiceException se;

  _UserLikesService_GetMovieRating_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_se(const ServiceException& val);

  bool operator == (const UserLikesService_GetMovieRating_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const UserLikesService_GetMovieRating_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserLikesService_GetMovieRating_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UserLikesService_GetMovieRating_presult__isset {
  _UserLikesService_GetMovieRating_presult__isset() : success(false), se(false) {}
  bool success :1;
  bool se :1;
} _UserLikesService_GetMovieRating_presult__isset;

class UserLikesService_GetMovieRating_presult {
 public:


  virtual ~UserLikesService_GetMovieRating_presult() noexcept;
  int64_t* success;
  ServiceException se;

  _UserLikesService_GetMovieRating_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _UserLikesService_UserWatchMovie_args__isset {
  _UserLikesService_UserWatchMovie_args__isset() : user_id(false), movie_id(false) {}
  bool user_id :1;
  bool movie_id :1;
} _UserLikesService_UserWatchMovie_args__isset;

class UserLikesService_UserWatchMovie_args {
 public:

  UserLikesService_UserWatchMovie_args(const UserLikesService_UserWatchMovie_args&);
  UserLikesService_UserWatchMovie_args& operator=(const UserLikesService_UserWatchMovie_args&);
  UserLikesService_UserWatchMovie_args() : user_id(0), movie_id() {
  }

  virtual ~UserLikesService_UserWatchMovie_args() noexcept;
  int64_t user_id;
  std::string movie_id;

  _UserLikesService_UserWatchMovie_args__isset __isset;

  void __set_user_id(const int64_t val);

  void __set_movie_id(const std::string& val);

  bool operator == (const UserLikesService_UserWatchMovie_args & rhs) const
  {
    if (!(user_id == rhs.user_id))
      return false;
    if (!(movie_id == rhs.movie_id))
      return false;
    return true;
  }
  bool operator != (const UserLikesService_UserWatchMovie_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserLikesService_UserWatchMovie_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class UserLikesService_UserWatchMovie_pargs {
 public:


  virtual ~UserLikesService_UserWatchMovie_pargs() noexcept;
  const int64_t* user_id;
  const std::string* movie_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UserLikesService_UserWatchMovie_result__isset {
  _UserLikesService_UserWatchMovie_result__isset() : se(false) {}
  bool se :1;
} _UserLikesService_UserWatchMovie_result__isset;

class UserLikesService_UserWatchMovie_result {
 public:

  UserLikesService_UserWatchMovie_result(const UserLikesService_UserWatchMovie_result&);
  UserLikesService_UserWatchMovie_result& operator=(const UserLikesService_UserWatchMovie_result&);
  UserLikesService_UserWatchMovie_result() {
  }

  virtual ~UserLikesService_UserWatchMovie_result() noexcept;
  ServiceException se;

  _UserLikesService_UserWatchMovie_result__isset __isset;

  void __set_se(const ServiceException& val);

  bool operator == (const UserLikesService_UserWatchMovie_result & rhs) const
  {
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const UserLikesService_UserWatchMovie_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserLikesService_UserWatchMovie_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UserLikesService_UserWatchMovie_presult__isset {
  _UserLikesService_UserWatchMovie_presult__isset() : se(false) {}
  bool se :1;
} _UserLikesService_UserWatchMovie_presult__isset;

class UserLikesService_UserWatchMovie_presult {
 public:


  virtual ~UserLikesService_UserWatchMovie_presult() noexcept;
  ServiceException se;

  _UserLikesService_UserWatchMovie_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _UserLikesService_AddUser_args__isset {
  _UserLikesService_AddUser_args__isset() : user_name(false) {}
  bool user_name :1;
} _UserLikesService_AddUser_args__isset;

class UserLikesService_AddUser_args {
 public:

  UserLikesService_AddUser_args(const UserLikesService_AddUser_args&);
  UserLikesService_AddUser_args& operator=(const UserLikesService_AddUser_args&);
  UserLikesService_AddUser_args() : user_name() {
  }

  virtual ~UserLikesService_AddUser_args() noexcept;
  std::string user_name;

  _UserLikesService_AddUser_args__isset __isset;

  void __set_user_name(const std::string& val);

  bool operator == (const UserLikesService_AddUser_args & rhs) const
  {
    if (!(user_name == rhs.user_name))
      return false;
    return true;
  }
  bool operator != (const UserLikesService_AddUser_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserLikesService_AddUser_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class UserLikesService_AddUser_pargs {
 public:


  virtual ~UserLikesService_AddUser_pargs() noexcept;
  const std::string* user_name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UserLikesService_AddUser_result__isset {
  _UserLikesService_AddUser_result__isset() : se(false) {}
  bool se :1;
} _UserLikesService_AddUser_result__isset;

class UserLikesService_AddUser_result {
 public:

  UserLikesService_AddUser_result(const UserLikesService_AddUser_result&);
  UserLikesService_AddUser_result& operator=(const UserLikesService_AddUser_result&);
  UserLikesService_AddUser_result() {
  }

  virtual ~UserLikesService_AddUser_result() noexcept;
  ServiceException se;

  _UserLikesService_AddUser_result__isset __isset;

  void __set_se(const ServiceException& val);

  bool operator == (const UserLikesService_AddUser_result & rhs) const
  {
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const UserLikesService_AddUser_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserLikesService_AddUser_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UserLikesService_AddUser_presult__isset {
  _UserLikesService_AddUser_presult__isset() : se(false) {}
  bool se :1;
} _UserLikesService_AddUser_presult__isset;

class UserLikesService_AddUser_presult {
 public:


  virtual ~UserLikesService_AddUser_presult() noexcept;
  ServiceException se;

  _UserLikesService_AddUser_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _UserLikesService_GetUserID_args__isset {
  _UserLikesService_GetUserID_args__isset() : user_name(false) {}
  bool user_name :1;
} _UserLikesService_GetUserID_args__isset;

class UserLikesService_GetUserID_args {
 public:

  UserLikesService_GetUserID_args(const UserLikesService_GetUserID_args&);
  UserLikesService_GetUserID_args& operator=(const UserLikesService_GetUserID_args&);
  UserLikesService_GetUserID_args() : user_name() {
  }

  virtual ~UserLikesService_GetUserID_args() noexcept;
  std::string user_name;

  _UserLikesService_GetUserID_args__isset __isset;

  void __set_user_name(const std::string& val);

  bool operator == (const UserLikesService_GetUserID_args & rhs) const
  {
    if (!(user_name == rhs.user_name))
      return false;
    return true;
  }
  bool operator != (const UserLikesService_GetUserID_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserLikesService_GetUserID_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class UserLikesService_GetUserID_pargs {
 public:


  virtual ~UserLikesService_GetUserID_pargs() noexcept;
  const std::string* user_name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UserLikesService_GetUserID_result__isset {
  _UserLikesService_GetUserID_result__isset() : success(false), se(false) {}
  bool success :1;
  bool se :1;
} _UserLikesService_GetUserID_result__isset;

class UserLikesService_GetUserID_result {
 public:

  UserLikesService_GetUserID_result(const UserLikesService_GetUserID_result&);
  UserLikesService_GetUserID_result& operator=(const UserLikesService_GetUserID_result&);
  UserLikesService_GetUserID_result() : success(0) {
  }

  virtual ~UserLikesService_GetUserID_result() noexcept;
  int64_t success;
  ServiceException se;

  _UserLikesService_GetUserID_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_se(const ServiceException& val);

  bool operator == (const UserLikesService_GetUserID_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const UserLikesService_GetUserID_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserLikesService_GetUserID_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UserLikesService_GetUserID_presult__isset {
  _UserLikesService_GetUserID_presult__isset() : success(false), se(false) {}
  bool success :1;
  bool se :1;
} _UserLikesService_GetUserID_presult__isset;

class UserLikesService_GetUserID_presult {
 public:


  virtual ~UserLikesService_GetUserID_presult() noexcept;
  int64_t* success;
  ServiceException se;

  _UserLikesService_GetUserID_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class UserLikesServiceClient : virtual public UserLikesServiceIf {
 public:
  UserLikesServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  UserLikesServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void UserRateMovie(const int64_t user_id, const std::string& movie_id, const int64_t likeDislike);
  void send_UserRateMovie(const int64_t user_id, const std::string& movie_id, const int64_t likeDislike);
  void recv_UserRateMovie();
  void GetUsersLikedMovies(std::vector<std::string> & _return, const int64_t user_id);
  void send_GetUsersLikedMovies(const int64_t user_id);
  void recv_GetUsersLikedMovies(std::vector<std::string> & _return);
  int64_t GetMovieRating(const std::string& movie_id);
  void send_GetMovieRating(const std::string& movie_id);
  int64_t recv_GetMovieRating();
  void UserWatchMovie(const int64_t user_id, const std::string& movie_id);
  void send_UserWatchMovie(const int64_t user_id, const std::string& movie_id);
  void recv_UserWatchMovie();
  void AddUser(const std::string& user_name);
  void send_AddUser(const std::string& user_name);
  void recv_AddUser();
  int64_t GetUserID(const std::string& user_name);
  void send_GetUserID(const std::string& user_name);
  int64_t recv_GetUserID();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class UserLikesServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<UserLikesServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (UserLikesServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_UserRateMovie(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetUsersLikedMovies(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetMovieRating(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_UserWatchMovie(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AddUser(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetUserID(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  UserLikesServiceProcessor(::std::shared_ptr<UserLikesServiceIf> iface) :
    iface_(iface) {
    processMap_["UserRateMovie"] = &UserLikesServiceProcessor::process_UserRateMovie;
    processMap_["GetUsersLikedMovies"] = &UserLikesServiceProcessor::process_GetUsersLikedMovies;
    processMap_["GetMovieRating"] = &UserLikesServiceProcessor::process_GetMovieRating;
    processMap_["UserWatchMovie"] = &UserLikesServiceProcessor::process_UserWatchMovie;
    processMap_["AddUser"] = &UserLikesServiceProcessor::process_AddUser;
    processMap_["GetUserID"] = &UserLikesServiceProcessor::process_GetUserID;
  }

  virtual ~UserLikesServiceProcessor() {}
};

class UserLikesServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  UserLikesServiceProcessorFactory(const ::std::shared_ptr< UserLikesServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< UserLikesServiceIfFactory > handlerFactory_;
};

class UserLikesServiceMultiface : virtual public UserLikesServiceIf {
 public:
  UserLikesServiceMultiface(std::vector<std::shared_ptr<UserLikesServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~UserLikesServiceMultiface() {}
 protected:
  std::vector<std::shared_ptr<UserLikesServiceIf> > ifaces_;
  UserLikesServiceMultiface() {}
  void add(::std::shared_ptr<UserLikesServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void UserRateMovie(const int64_t user_id, const std::string& movie_id, const int64_t likeDislike) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UserRateMovie(user_id, movie_id, likeDislike);
    }
    ifaces_[i]->UserRateMovie(user_id, movie_id, likeDislike);
  }

  void GetUsersLikedMovies(std::vector<std::string> & _return, const int64_t user_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetUsersLikedMovies(_return, user_id);
    }
    ifaces_[i]->GetUsersLikedMovies(_return, user_id);
    return;
  }

  int64_t GetMovieRating(const std::string& movie_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetMovieRating(movie_id);
    }
    return ifaces_[i]->GetMovieRating(movie_id);
  }

  void UserWatchMovie(const int64_t user_id, const std::string& movie_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UserWatchMovie(user_id, movie_id);
    }
    ifaces_[i]->UserWatchMovie(user_id, movie_id);
  }

  void AddUser(const std::string& user_name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AddUser(user_name);
    }
    ifaces_[i]->AddUser(user_name);
  }

  int64_t GetUserID(const std::string& user_name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetUserID(user_name);
    }
    return ifaces_[i]->GetUserID(user_name);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class UserLikesServiceConcurrentClient : virtual public UserLikesServiceIf {
 public:
  UserLikesServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  UserLikesServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void UserRateMovie(const int64_t user_id, const std::string& movie_id, const int64_t likeDislike);
  int32_t send_UserRateMovie(const int64_t user_id, const std::string& movie_id, const int64_t likeDislike);
  void recv_UserRateMovie(const int32_t seqid);
  void GetUsersLikedMovies(std::vector<std::string> & _return, const int64_t user_id);
  int32_t send_GetUsersLikedMovies(const int64_t user_id);
  void recv_GetUsersLikedMovies(std::vector<std::string> & _return, const int32_t seqid);
  int64_t GetMovieRating(const std::string& movie_id);
  int32_t send_GetMovieRating(const std::string& movie_id);
  int64_t recv_GetMovieRating(const int32_t seqid);
  void UserWatchMovie(const int64_t user_id, const std::string& movie_id);
  int32_t send_UserWatchMovie(const int64_t user_id, const std::string& movie_id);
  void recv_UserWatchMovie(const int32_t seqid);
  void AddUser(const std::string& user_name);
  int32_t send_AddUser(const std::string& user_name);
  void recv_AddUser(const int32_t seqid);
  int64_t GetUserID(const std::string& user_name);
  int32_t send_GetUserID(const std::string& user_name);
  int64_t recv_GetUserID(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
